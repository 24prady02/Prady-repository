{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNBXCWZOVRwOboSrwuXsBO8",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "18d37c1c2ee24062aef1a0dbefdd1c37": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3f28362ae3914f938a3f5bacc85ae1ae",
              "IPY_MODEL_2eaecdaefc184fd2b4652dd4ae79202d",
              "IPY_MODEL_0da55946754044e1a34aa031bbca9656"
            ],
            "layout": "IPY_MODEL_00b00858a20d4374b912b91aba37fb51"
          }
        },
        "3f28362ae3914f938a3f5bacc85ae1ae": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_6da0bd41242f47678cfaec2529083d6b",
            "placeholder": "​",
            "style": "IPY_MODEL_8193efff183e4872be3e4c0a603815ab",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "2eaecdaefc184fd2b4652dd4ae79202d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5355af5a1f4a47b4b1332474b3a5b1b6",
            "max": 26,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_591759fdcfcb4eaa86693615c7dbda74",
            "value": 26
          }
        },
        "0da55946754044e1a34aa031bbca9656": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_d3b153bcf3b640b0abce91854d202b10",
            "placeholder": "​",
            "style": "IPY_MODEL_adf71741ff984c3f9c3dc9e76f8f65ca",
            "value": " 26.0/26.0 [00:00&lt;00:00, 546B/s]"
          }
        },
        "00b00858a20d4374b912b91aba37fb51": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6da0bd41242f47678cfaec2529083d6b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8193efff183e4872be3e4c0a603815ab": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "5355af5a1f4a47b4b1332474b3a5b1b6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "591759fdcfcb4eaa86693615c7dbda74": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "d3b153bcf3b640b0abce91854d202b10": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "adf71741ff984c3f9c3dc9e76f8f65ca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7ccb3da4d2f54c09bba23e25ba0dc7ac": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_de243426823a4d67a30a2c7d93576245",
              "IPY_MODEL_a2940dcd1a4649f393c6724ddd6359c8",
              "IPY_MODEL_1f1b20009e43459dbe8cfbd08c187b75"
            ],
            "layout": "IPY_MODEL_5a8bd9bde028413eb7765815f69dd8a7"
          }
        },
        "de243426823a4d67a30a2c7d93576245": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_bce672be2ade4a57b302ebda69a0a5e8",
            "placeholder": "​",
            "style": "IPY_MODEL_41083b7ff51245d880c6f11e57f11b05",
            "value": "vocab.json: 100%"
          }
        },
        "a2940dcd1a4649f393c6724ddd6359c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_fab13dc0fa5b46c89707f835cf08f6c8",
            "max": 1042301,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_d7962089fb68472ead8e90458fb5e3be",
            "value": 1042301
          }
        },
        "1f1b20009e43459dbe8cfbd08c187b75": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4e57077027534125b763c8540d608a97",
            "placeholder": "​",
            "style": "IPY_MODEL_1a57cf15ec5a478aa88858bebd2efdc9",
            "value": " 1.04M/1.04M [00:00&lt;00:00, 2.63MB/s]"
          }
        },
        "5a8bd9bde028413eb7765815f69dd8a7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bce672be2ade4a57b302ebda69a0a5e8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "41083b7ff51245d880c6f11e57f11b05": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "fab13dc0fa5b46c89707f835cf08f6c8": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d7962089fb68472ead8e90458fb5e3be": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4e57077027534125b763c8540d608a97": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1a57cf15ec5a478aa88858bebd2efdc9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7a62cd7bb6ee455596ae9006d88c81a4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_ac032e1652e142a3b8ffa14ba9fdd7d1",
              "IPY_MODEL_40033330b83d45c8b499359197e2401e",
              "IPY_MODEL_85d6783ba5c8469ab1273b2286399c1c"
            ],
            "layout": "IPY_MODEL_73aa2e0d98ee4fea8b045b1d0e9304e3"
          }
        },
        "ac032e1652e142a3b8ffa14ba9fdd7d1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_491d1eb1541e4a5ba1ef728ef5b3fa28",
            "placeholder": "​",
            "style": "IPY_MODEL_2d59d821439a4ade84f24b03b7294c58",
            "value": "merges.txt: 100%"
          }
        },
        "40033330b83d45c8b499359197e2401e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_98079d786f1e4dabb6a28f0a842ad9a0",
            "max": 456318,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_a8a74cc14bc94b8e8054a05af2049644",
            "value": 456318
          }
        },
        "85d6783ba5c8469ab1273b2286399c1c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ad2704b858834b73a58be498e53de030",
            "placeholder": "​",
            "style": "IPY_MODEL_cf7afd38e38e4a348e236198e9a63eb5",
            "value": " 456k/456k [00:00&lt;00:00, 6.51MB/s]"
          }
        },
        "73aa2e0d98ee4fea8b045b1d0e9304e3": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "491d1eb1541e4a5ba1ef728ef5b3fa28": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "2d59d821439a4ade84f24b03b7294c58": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "98079d786f1e4dabb6a28f0a842ad9a0": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a8a74cc14bc94b8e8054a05af2049644": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "ad2704b858834b73a58be498e53de030": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "cf7afd38e38e4a348e236198e9a63eb5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "12db8791ce5f46abb4cdeb7d9330b2fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a21c360c32a541198556e0ae3f4f1a89",
              "IPY_MODEL_dcc65c86cc3c4cb183774370ccb9ef35",
              "IPY_MODEL_34627ff5795b4815a613e76033390e17"
            ],
            "layout": "IPY_MODEL_c297590915284327a91103c41a2aa339"
          }
        },
        "a21c360c32a541198556e0ae3f4f1a89": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_261e1db7321b4a36bf32851eb2e90a16",
            "placeholder": "​",
            "style": "IPY_MODEL_a4d76e7bc11f4948a19d05afb37e2243",
            "value": "tokenizer.json: 100%"
          }
        },
        "dcc65c86cc3c4cb183774370ccb9ef35": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f796a39e0cbc4df4a061f24c5e2d4a3a",
            "max": 1355256,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_0bedc28a677b43ee808dc7157ba8d9d2",
            "value": 1355256
          }
        },
        "34627ff5795b4815a613e76033390e17": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_5569b6bab0de49089f48043d02c9185d",
            "placeholder": "​",
            "style": "IPY_MODEL_1f9b5413fe284adcbb531845ec0e9f20",
            "value": " 1.36M/1.36M [00:00&lt;00:00, 12.8MB/s]"
          }
        },
        "c297590915284327a91103c41a2aa339": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "261e1db7321b4a36bf32851eb2e90a16": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a4d76e7bc11f4948a19d05afb37e2243": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f796a39e0cbc4df4a061f24c5e2d4a3a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0bedc28a677b43ee808dc7157ba8d9d2": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "5569b6bab0de49089f48043d02c9185d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1f9b5413fe284adcbb531845ec0e9f20": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c25003e134424b75ab0b1e3eb115aafa": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_3d5bebb9cf704c85b33ce6902855b8e3",
              "IPY_MODEL_1d088fe9368b4d29b69ed65c52c27585",
              "IPY_MODEL_e4da064a489b4561b3b027b5d95160e0"
            ],
            "layout": "IPY_MODEL_d4fb6b6e84e24dcd8b24398f4e7cfcf4"
          }
        },
        "3d5bebb9cf704c85b33ce6902855b8e3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f8f408547a7c4abaa91256082dd21683",
            "placeholder": "​",
            "style": "IPY_MODEL_c3da4c8bdfed4414b00984099abcc648",
            "value": "config.json: 100%"
          }
        },
        "1d088fe9368b4d29b69ed65c52c27585": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1c8399879a3a4300a168db5f073a58b9",
            "max": 665,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_50fe85d271444c8ebf15aefe7b2b79fb",
            "value": 665
          }
        },
        "e4da064a489b4561b3b027b5d95160e0": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_27567505e38346928110698d74c6c0bf",
            "placeholder": "​",
            "style": "IPY_MODEL_c7668c9a8548465c936169d58314ad4e",
            "value": " 665/665 [00:00&lt;00:00, 6.39kB/s]"
          }
        },
        "d4fb6b6e84e24dcd8b24398f4e7cfcf4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f8f408547a7c4abaa91256082dd21683": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c3da4c8bdfed4414b00984099abcc648": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1c8399879a3a4300a168db5f073a58b9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "50fe85d271444c8ebf15aefe7b2b79fb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "27567505e38346928110698d74c6c0bf": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c7668c9a8548465c936169d58314ad4e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "bb105c41caef419b90c4163fc8897f50": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_5ab4cdb048324dde82228b496ab35990",
              "IPY_MODEL_fa815a5fcbfc4aa880edf74b0f21192c",
              "IPY_MODEL_3d6446c6ddf54550a8cc06dcd38a0b72"
            ],
            "layout": "IPY_MODEL_18c5a4231c92432a895ede812c7b0e85"
          }
        },
        "5ab4cdb048324dde82228b496ab35990": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_b1ca6754e484432cb6680a01bc22707c",
            "placeholder": "​",
            "style": "IPY_MODEL_1c0097c8eb904d64860dfb45d4ba5b65",
            "value": "model.safetensors: 100%"
          }
        },
        "fa815a5fcbfc4aa880edf74b0f21192c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_95d517b3d9974581bbcc417a7ab6df79",
            "max": 548105171,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_54430d25db5949d7957b02031f7dd96b",
            "value": 548105171
          }
        },
        "3d6446c6ddf54550a8cc06dcd38a0b72": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cb0c27805cab479fb95a769e7f6dd2dc",
            "placeholder": "​",
            "style": "IPY_MODEL_4b7c25f199cd4f5798da6b9a2dc720c9",
            "value": " 548M/548M [00:07&lt;00:00, 24.4MB/s]"
          }
        },
        "18c5a4231c92432a895ede812c7b0e85": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b1ca6754e484432cb6680a01bc22707c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1c0097c8eb904d64860dfb45d4ba5b65": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "95d517b3d9974581bbcc417a7ab6df79": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "54430d25db5949d7957b02031f7dd96b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cb0c27805cab479fb95a769e7f6dd2dc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4b7c25f199cd4f5798da6b9a2dc720c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c0fcd02ef71141219e1d22377d6f6078": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_177d25017f754ce69c603ce577bc380b",
              "IPY_MODEL_c3210f0143fd44539a2a38d61c77495e",
              "IPY_MODEL_c513220b0c9c42e98409366f9dc0a5ed"
            ],
            "layout": "IPY_MODEL_fd73197747774174994b9a4f690a7743"
          }
        },
        "177d25017f754ce69c603ce577bc380b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_a17f0695077647c0af22f013d1faab44",
            "placeholder": "​",
            "style": "IPY_MODEL_8305e7863fba462a945b9fa1a4cbbd5f",
            "value": "generation_config.json: 100%"
          }
        },
        "c3210f0143fd44539a2a38d61c77495e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3560907a769e4e0b95cb028a1194ed30",
            "max": 124,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_ef31f65ad37542408daeb02aebfa3450",
            "value": 124
          }
        },
        "c513220b0c9c42e98409366f9dc0a5ed": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_aa5561aef3bb4832af9a765092844ebc",
            "placeholder": "​",
            "style": "IPY_MODEL_7662580e0e2b4699a804da7b1911e587",
            "value": " 124/124 [00:00&lt;00:00, 5.34kB/s]"
          }
        },
        "fd73197747774174994b9a4f690a7743": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a17f0695077647c0af22f013d1faab44": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8305e7863fba462a945b9fa1a4cbbd5f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3560907a769e4e0b95cb028a1194ed30": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "ef31f65ad37542408daeb02aebfa3450": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "aa5561aef3bb4832af9a765092844ebc": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7662580e0e2b4699a804da7b1911e587": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "15c8da62952b43c9a2cf95a8f732c421": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_d950f71b940e4220b1b457d654de139c",
              "IPY_MODEL_c6d132d3c9dc4e62a8df4fcd3c4f1097",
              "IPY_MODEL_8edc8e3bcbb645e8b27ad85b1cb819f7"
            ],
            "layout": "IPY_MODEL_e231b60aa74d4d9eaa0a7228a6a039bb"
          }
        },
        "d950f71b940e4220b1b457d654de139c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_925e12f42d3b4f43a0c0719f6ef36fa5",
            "placeholder": "​",
            "style": "IPY_MODEL_dd1a5819a65f4f19bc034d370083fc0c",
            "value": "tokenizer_config.json: 100%"
          }
        },
        "c6d132d3c9dc4e62a8df4fcd3c4f1097": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_21562e108a4645aaabdfe65a0a9bc964",
            "max": 48,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_9a02e14c92a44880a65fbbb8ea3e37c9",
            "value": 48
          }
        },
        "8edc8e3bcbb645e8b27ad85b1cb819f7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_cd8c53cd02dd4ac7a9d07e7c7057e8ae",
            "placeholder": "​",
            "style": "IPY_MODEL_0dd3121aadb148179f5dfa54a0a65c8d",
            "value": " 48.0/48.0 [00:00&lt;00:00, 1.79kB/s]"
          }
        },
        "e231b60aa74d4d9eaa0a7228a6a039bb": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "925e12f42d3b4f43a0c0719f6ef36fa5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "dd1a5819a65f4f19bc034d370083fc0c": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "21562e108a4645aaabdfe65a0a9bc964": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9a02e14c92a44880a65fbbb8ea3e37c9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "cd8c53cd02dd4ac7a9d07e7c7057e8ae": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "0dd3121aadb148179f5dfa54a0a65c8d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "3ded9292bded4a61b4e525007915c9d5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_7d9c98c0cb30458fa62eca36c37ff7cd",
              "IPY_MODEL_478ec17485664ea0affe3d60c9307741",
              "IPY_MODEL_ec8869628fe74d3db1ecfff699087e0f"
            ],
            "layout": "IPY_MODEL_2cc538b883ba4f83aa3ddd12673d3f9a"
          }
        },
        "7d9c98c0cb30458fa62eca36c37ff7cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_3854e43ca3964ca6a38c8c30f3c2821b",
            "placeholder": "​",
            "style": "IPY_MODEL_b69bc867f2334b65a17190ab36cb3fba",
            "value": "vocab.txt: 100%"
          }
        },
        "478ec17485664ea0affe3d60c9307741": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_f0bd04bbcb1346608c2ebdeb7451a7a4",
            "max": 231508,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_7c36b5326b9340608296f6bb2ecc072b",
            "value": 231508
          }
        },
        "ec8869628fe74d3db1ecfff699087e0f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_797dfb21617a495b9f717f21cbd75eb7",
            "placeholder": "​",
            "style": "IPY_MODEL_a159a21baeec47ee8841ce57395d52c1",
            "value": " 232k/232k [00:00&lt;00:00, 8.98MB/s]"
          }
        },
        "2cc538b883ba4f83aa3ddd12673d3f9a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "3854e43ca3964ca6a38c8c30f3c2821b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "b69bc867f2334b65a17190ab36cb3fba": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f0bd04bbcb1346608c2ebdeb7451a7a4": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "7c36b5326b9340608296f6bb2ecc072b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "797dfb21617a495b9f717f21cbd75eb7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "a159a21baeec47ee8841ce57395d52c1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6f042a5c12564d6899a8c5d4b23d9e4a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_f209ff3d23e447f8ab95d8efcc6c1a07",
              "IPY_MODEL_29d2d7e901344c77b480d985f1325c2f",
              "IPY_MODEL_da82ebef81c84aaf84af38fb4c89a7ce"
            ],
            "layout": "IPY_MODEL_342a42ff91d54ab4b77a690e1541c230"
          }
        },
        "f209ff3d23e447f8ab95d8efcc6c1a07": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_1833d4769aee4dabbff1d2dcd5b61a11",
            "placeholder": "​",
            "style": "IPY_MODEL_197b22ee91854ea8ba8491e8b395b251",
            "value": "tokenizer.json: 100%"
          }
        },
        "29d2d7e901344c77b480d985f1325c2f": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_ff7d01cd54924cb3afbad16975bcc4a9",
            "max": 466062,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_f8add1c80cc7464594dcfc63b92a1397",
            "value": 466062
          }
        },
        "da82ebef81c84aaf84af38fb4c89a7ce": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_7077884b8be14f379170988fffcd82f6",
            "placeholder": "​",
            "style": "IPY_MODEL_d0e6b1f89d064960af09a1a4d7d8d4ef",
            "value": " 466k/466k [00:00&lt;00:00, 15.8MB/s]"
          }
        },
        "342a42ff91d54ab4b77a690e1541c230": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "1833d4769aee4dabbff1d2dcd5b61a11": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "197b22ee91854ea8ba8491e8b395b251": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "ff7d01cd54924cb3afbad16975bcc4a9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "f8add1c80cc7464594dcfc63b92a1397": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "7077884b8be14f379170988fffcd82f6": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "d0e6b1f89d064960af09a1a4d7d8d4ef": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "14311489214847e39e944d8c3d15dbd5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_a846b8db868c48e0aa39dc789d292bdf",
              "IPY_MODEL_3b8928456f9c490f99f0d721a5770c22",
              "IPY_MODEL_1fe9d7a603e044b5b8a55e57aaf61d5d"
            ],
            "layout": "IPY_MODEL_39f6ae7f95c246cead8dc3938e697dac"
          }
        },
        "a846b8db868c48e0aa39dc789d292bdf": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_efd9c50c22bf4a46a0f640e3a1fb9d8b",
            "placeholder": "​",
            "style": "IPY_MODEL_c61f585303df4e1a8b61a896b98f9e89",
            "value": "config.json: 100%"
          }
        },
        "3b8928456f9c490f99f0d721a5770c22": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_9428d1bac50f4a1a907383e2f230d7b1",
            "max": 570,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_95375a35ec8b4dd3a980d555c50f9684",
            "value": 570
          }
        },
        "1fe9d7a603e044b5b8a55e57aaf61d5d": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_02cc633a65cb4dacb27214a03f42011c",
            "placeholder": "​",
            "style": "IPY_MODEL_85f5c8bfa1354fdfb99b74236f4bfe1e",
            "value": " 570/570 [00:00&lt;00:00, 19.5kB/s]"
          }
        },
        "39f6ae7f95c246cead8dc3938e697dac": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "efd9c50c22bf4a46a0f640e3a1fb9d8b": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "c61f585303df4e1a8b61a896b98f9e89": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "9428d1bac50f4a1a907383e2f230d7b1": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "95375a35ec8b4dd3a980d555c50f9684": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "02cc633a65cb4dacb27214a03f42011c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "85f5c8bfa1354fdfb99b74236f4bfe1e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "c054b0abe80445ae8321a6e7496d55dc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_18c098f3577c4564be9b3f5fd7dc356b",
              "IPY_MODEL_691619fe27d043a0854aace716f04775",
              "IPY_MODEL_c63de00550bd4e5f8eec65b0b293ed11"
            ],
            "layout": "IPY_MODEL_e8037c7b0df7425d82f37e179e3506ea"
          }
        },
        "18c098f3577c4564be9b3f5fd7dc356b": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_01dc1eec48804197a757fe0820ebaf55",
            "placeholder": "​",
            "style": "IPY_MODEL_81f8cc1ca5044135bd1837473d6725b4",
            "value": "model.safetensors: 100%"
          }
        },
        "691619fe27d043a0854aace716f04775": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatProgressModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatProgressModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ProgressView",
            "bar_style": "success",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_0bab647f96624af49a44c2615da5b64c",
            "max": 440449768,
            "min": 0,
            "orientation": "horizontal",
            "style": "IPY_MODEL_00d47743221e4791a015cb86ba1db65e",
            "value": 440449768
          }
        },
        "c63de00550bd4e5f8eec65b0b293ed11": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "HTMLModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "HTMLModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "HTMLView",
            "description": "",
            "description_tooltip": null,
            "layout": "IPY_MODEL_4424e2d8887649e8b6635d454a46ef61",
            "placeholder": "​",
            "style": "IPY_MODEL_51b4807d83064612a191bb694aa814e9",
            "value": " 440M/440M [00:03&lt;00:00, 112MB/s]"
          }
        },
        "e8037c7b0df7425d82f37e179e3506ea": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "01dc1eec48804197a757fe0820ebaf55": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "81f8cc1ca5044135bd1837473d6725b4": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "0bab647f96624af49a44c2615da5b64c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "00d47743221e4791a015cb86ba1db65e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ProgressStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "bar_color": null,
            "description_width": ""
          }
        },
        "4424e2d8887649e8b6635d454a46ef61": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "51b4807d83064612a191bb694aa814e9": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/24prady02/Prady-repository/blob/main/Code_Personalization\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EcqU9PLh3YwC",
        "outputId": "10af3996-7867-4bed-b860-6a06a8f7876a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting rdflib\n",
            "  Downloading rdflib-7.0.0-py3-none-any.whl (531 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m531.9/531.9 kB\u001b[0m \u001b[31m7.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting isodate<0.7.0,>=0.6.0 (from rdflib)\n",
            "  Downloading isodate-0.6.1-py2.py3-none-any.whl (41 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m41.7/41.7 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: pyparsing<4,>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from rdflib) (3.1.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from isodate<0.7.0,>=0.6.0->rdflib) (1.16.0)\n",
            "Installing collected packages: isodate, rdflib\n",
            "Successfully installed isodate-0.6.1 rdflib-7.0.0\n"
          ]
        }
      ],
      "source": [
        "!pip install rdflib"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install sparqlwrapper"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6g5dJ5C53sHX",
        "outputId": "d1e1b9d7-23ba-49a4-8221-2a7c75e701ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting sparqlwrapper\n",
            "  Downloading SPARQLWrapper-2.0.0-py3-none-any.whl (28 kB)\n",
            "Requirement already satisfied: rdflib>=6.1.1 in /usr/local/lib/python3.10/dist-packages (from sparqlwrapper) (7.0.0)\n",
            "Requirement already satisfied: isodate<0.7.0,>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from rdflib>=6.1.1->sparqlwrapper) (0.6.1)\n",
            "Requirement already satisfied: pyparsing<4,>=2.1.0 in /usr/local/lib/python3.10/dist-packages (from rdflib>=6.1.1->sparqlwrapper) (3.1.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from isodate<0.7.0,>=0.6.0->rdflib>=6.1.1->sparqlwrapper) (1.16.0)\n",
            "Installing collected packages: sparqlwrapper\n",
            "Successfully installed sparqlwrapper-2.0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "import numpy as np\n",
        "from rdflib import Graph, Namespace, RDF, OWL, RDFS, Literal, XSD\n",
        "import spacy\n",
        "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
        "import re  # Import the regular expression module for pattern matching\n",
        "\n",
        "# Define namespaces\n",
        "ex = Namespace(\"http://example.org/physics#\")\n",
        "\n",
        "# Create an RDF graph\n",
        "g = Graph()\n",
        "\n",
        "# Classes\n",
        "g.add((ex.Mass, RDF.type, OWL.Class))\n",
        "g.add((ex.Length, RDF.type, OWL.Class))\n",
        "g.add((ex.Rotation, RDF.type, OWL.Class))\n",
        "g.add((ex.Axis, RDF.type, OWL.Class))\n",
        "g.add((ex.Work, RDF.type, OWL.Class))\n",
        "\n",
        "# Properties\n",
        "g.add((ex.hasMass, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasMass, RDFS.domain, ex.Mass))\n",
        "g.add((ex.hasMass, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasLength, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasLength, RDFS.domain, ex.Length))\n",
        "g.add((ex.hasLength, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasAngularSpeed, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasAngularSpeed, RDFS.domain, ex.Rotation))\n",
        "g.add((ex.hasAngularSpeed, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasWork, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasWork, RDFS.domain, ex.Work))\n",
        "g.add((ex.hasWork, RDFS.range, ex.Axis))\n",
        "\n",
        "# Axioms\n",
        "g.add((ex.conservationOfAngularMomentum, RDF.type, OWL.Axiom))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedSource, ex.Rotation))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedProperty, ex.hasAngularSpeed))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "g.add((ex.workEnergyPrinciple, RDF.type, OWL.Axiom))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedSource, ex.Work))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedProperty, ex.hasWork))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "# Rules\n",
        "g.add((ex.minWorkAxisDistance, RDF.type, OWL.DatatypeProperty))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.domain, ex.Work))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.range, XSD.double))\n",
        "\n",
        "# Individuals\n",
        "g.add((ex.mass1, RDF.type, ex.Mass))\n",
        "g.add((ex.mass1, ex.hasMass, Literal(\"0.3\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.mass2, RDF.type, ex.Mass))\n",
        "g.add((ex.mass2, ex.hasMass, Literal(\"0.7\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.rod, RDF.type, ex.Axis))\n",
        "g.add((ex.rod, ex.hasLength, Literal(\"1.4\", datatype=XSD.double)))\n",
        "g.add((ex.rod, ex.hasMass, Literal(\"negligible\", datatype=XSD.string)))\n",
        "\n",
        "# Load the GPT-2 tokenizer and model\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\n",
        "model = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n",
        "\n",
        "# Load pre-trained BERT model and tokenizer\n",
        "bert_tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "bert_model = BertForSequenceClassification.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Initialize Spacy for natural language processing\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Define section headers for each key point\n",
        "section_headers = {\n",
        "    \"Introduction\": [\"In rotational dynamics\"],\n",
        "    \"Work-Energy Principle\": [\"work-energy principle states that\"],\n",
        "    \"Mass Distribution Impact\": [\"distribution of mass along the axis\"],\n",
        "    \"Optimal Axis of Rotation\": [\"minimizing the work done\"],\n",
        "}\n",
        "\n",
        "# Define the contextualized example\n",
        "learner_background = \"The learner has a background in engineering and is interested in practical applications of physics.\"\n",
        "context_example = \"To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\"\n",
        "\n",
        "# Apply reinforcement learning to adaptively select examples\n",
        "class RLAgent:\n",
        "    def __init__(self):\n",
        "        self.example_selected = context_example\n",
        "\n",
        "    def update_example(self, learner_response):\n",
        "        # Simplified reward function based on learner's response\n",
        "        if learner_response == \"Relevant\":\n",
        "            reward = 1\n",
        "        else:\n",
        "            reward = -1\n",
        "\n",
        "        # Simplified Q-learning update rule\n",
        "        # In a real implementation, you would use more sophisticated algorithms\n",
        "        # Update the example based on the learner's response\n",
        "        if reward > 0:\n",
        "            self.example_selected = context_example\n",
        "\n",
        "# Simulated interaction with the learner\n",
        "learner_response = \"Relevant\"  # The learner finds the example relevant\n",
        "\n",
        "# Initialize RL agent\n",
        "agent = RLAgent()\n",
        "\n",
        "# Update example based on learner's response\n",
        "agent.update_example(learner_response)\n",
        "\n",
        "# Print the updated example selected by the RL agent\n",
        "print(\"Updated example selected by the RL agent:\")\n",
        "print(agent.example_selected)\n",
        "\n",
        "# Define a function to generate coherent responses based on the identified ontology elements, logical connectives, semantic analysis, pattern matching, and domain heuristics\n",
        "def generate_coherent_response_with_relations_and_analysis(ontology_elements, logical_connectives, text):\n",
        "    coherent_response = \"\"\n",
        "\n",
        "    # Generate coherent response based on identified ontology elements\n",
        "    if ontology_elements:\n",
        "        coherent_response += \"The following concepts were identified: \"\n",
        "        coherent_response += \", \".join(ontology_elements)\n",
        "        coherent_response += \". \"\n",
        "\n",
        "    # Add logical connectives to the coherent response\n",
        "    if logical_connectives:\n",
        "        coherent_response += \"The following logical connectives were identified: \"\n",
        "        coherent_response += \", \".join(logical_connectives)\n",
        "        coherent_response += \". \"\n",
        "\n",
        "    # Identify relationships between ontology elements and logical connectives using pattern matching and semantic analysis\n",
        "    relationships = {}\n",
        "    for elem in ontology_elements:\n",
        "        for conn in logical_connectives:\n",
        "            if elem.lower() in text.lower() and conn.lower() in text.lower():\n",
        "                if elem in relationships:\n",
        "                    relationships[elem].append(conn)\n",
        "                else:\n",
        "                    relationships[elem] = [conn]\n",
        "\n",
        "    # Add relationships to the coherent response\n",
        "    if relationships:\n",
        "        coherent_response += \"The relationships between ontology elements and logical connectives are as follows:\\n\"\n",
        "        for elem, conns in relationships.items():\n",
        "            coherent_response += f\"{elem}: {', '.join(conns)}\\n\"\n",
        "\n",
        "    # Incorporate domain heuristics\n",
        "    domain_heuristics = []\n",
        "\n",
        "    # Example domain heuristic: Stability of Rotation\n",
        "    if \"stable rotation\" in text or \"no torque required\" in text:\n",
        "        domain_heuristics.append(\"Stability of Rotation\")\n",
        "\n",
        "    # Include domain heuristics in the coherent response\n",
        "    if domain_heuristics:\n",
        "        coherent_response += \"Domain heuristics identified:\\n\"\n",
        "        coherent_response += \", \".join(domain_heuristics) + \"\\n\"\n",
        "\n",
        "    # Add a concluding statement\n",
        "    coherent_response += \"Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\"\n",
        "\n",
        "    return coherent_response\n",
        "\n",
        "# Identify Logical Connectives from Input Text\n",
        "def identify_logical_connectives(text):\n",
        "    logical_connectives = []\n",
        "    doc = nlp(text)\n",
        "    for token in doc:\n",
        "        if token.pos_ == \"SCONJ\" or token.pos_ == \"CCONJ\":\n",
        "            logical_connectives.append(token.text.lower())\n",
        "    return logical_connectives\n",
        "\n",
        "# Identify Euler's Rotation Theorem from Input Text\n",
        "def identify_eulers_rotation_theorem(text):\n",
        "    theorem_match = re.search(r\"Euler's rotation theorem\", text)\n",
        "    if theorem_match:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "# Relevant information from the extracted text\n",
        "response_text = \"\"\"\n",
        "Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space. This type of motion excludes the possibility of the instantaneous axis of rotation changing its orientation and cannot describe such phenomena as wobbling or precession. According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
        "\n",
        "This concept assumes that the rotation is also stable, such that no torque is required to keep it going. The kinematics and dynamics of rotation around a fixed axis of a rigid body are mathematically much simpler than those for free rotation of a rigid body; they are entirely analogous to those of linear motion along a single fixed direction, which is not true for free rotation of a rigid body. The expressions for the kinetic energy of the object, and for the forces on the parts of the object, are also simpler for rotation around a fixed axis, than for general rotational motion. For these reasons, rotation around a fixed axis is typically taught in introductory physics courses after students have mastered linear motion; the full generality of rotational motion is not usually taught in introductory physics classes.\n",
        "\"\"\"\n",
        "\n",
        "# Tokenize the response text\n",
        "input_ids = bert_tokenizer.encode(response_text, return_tensors='pt', max_length=512, truncation=True)\n",
        "\n",
        "# Perform semantic analysis using the BERT model\n",
        "with torch.no_grad():\n",
        "    outputs = bert_model(input_ids)\n",
        "\n",
        "# Extract the logits from the output\n",
        "logits = outputs.logits\n",
        "\n",
        "# Convert logits to probabilities using softmax\n",
        "probabilities = torch.softmax(logits, dim=1).squeeze().numpy()\n",
        "\n",
        "\n",
        "# Extract ontology and reasons based on probabilities\n",
        "# Sample ontology and reasons based on probabilities\n",
        "ontology_reasons = {\n",
        "    \"Rotation\": \"Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space.\",\n",
        "    \"Euler's rotation theorem\": \"According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\"\n",
        "}\n",
        "\n",
        "# Normalize probabilities\n",
        "normalized_probabilities = probabilities / np.sum(probabilities)\n",
        "\n",
        "# Sample ontology and reasons based on probabilities\n",
        "selected_ontology_reason = np.random.choice(list(ontology_reasons.keys()), p=normalized_probabilities, size=1, replace=False)[0]\n",
        "\n",
        "# Print the selected ontology and reason\n",
        "print(\"Selected Ontology:\", selected_ontology_reason)\n",
        "print(\"Reason:\", ontology_reasons[selected_ontology_reason])\n",
        "\n",
        "# Identify Euler's rotation theorem in the response text\n",
        "has_eulers_theorem = identify_eulers_rotation_theorem(response_text)\n",
        "\n",
        "# Generate coherent response with relations and analysis based on the selected ontology and reason\n",
        "coherent_response_with_relations_and_analysis = generate_coherent_response_with_relations_and_analysis(\n",
        "    [selected_ontology_reason],\n",
        "    [],\n",
        "    ontology_reasons[selected_ontology_reason]\n",
        ")\n",
        "\n",
        "# Print the coherent response with relations and analysis\n",
        "print(\"Coherent Response with Relations and Analysis:\")\n",
        "print(coherent_response_with_relations_and_analysis)\n",
        "print(\"Length of probabilities array:\", len(probabilities))\n",
        "print(\"Length of keys in ontology_reasons dictionary:\", len(ontology_reasons))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 699,
          "referenced_widgets": [
            "18d37c1c2ee24062aef1a0dbefdd1c37",
            "3f28362ae3914f938a3f5bacc85ae1ae",
            "2eaecdaefc184fd2b4652dd4ae79202d",
            "0da55946754044e1a34aa031bbca9656",
            "00b00858a20d4374b912b91aba37fb51",
            "6da0bd41242f47678cfaec2529083d6b",
            "8193efff183e4872be3e4c0a603815ab",
            "5355af5a1f4a47b4b1332474b3a5b1b6",
            "591759fdcfcb4eaa86693615c7dbda74",
            "d3b153bcf3b640b0abce91854d202b10",
            "adf71741ff984c3f9c3dc9e76f8f65ca",
            "7ccb3da4d2f54c09bba23e25ba0dc7ac",
            "de243426823a4d67a30a2c7d93576245",
            "a2940dcd1a4649f393c6724ddd6359c8",
            "1f1b20009e43459dbe8cfbd08c187b75",
            "5a8bd9bde028413eb7765815f69dd8a7",
            "bce672be2ade4a57b302ebda69a0a5e8",
            "41083b7ff51245d880c6f11e57f11b05",
            "fab13dc0fa5b46c89707f835cf08f6c8",
            "d7962089fb68472ead8e90458fb5e3be",
            "4e57077027534125b763c8540d608a97",
            "1a57cf15ec5a478aa88858bebd2efdc9",
            "7a62cd7bb6ee455596ae9006d88c81a4",
            "ac032e1652e142a3b8ffa14ba9fdd7d1",
            "40033330b83d45c8b499359197e2401e",
            "85d6783ba5c8469ab1273b2286399c1c",
            "73aa2e0d98ee4fea8b045b1d0e9304e3",
            "491d1eb1541e4a5ba1ef728ef5b3fa28",
            "2d59d821439a4ade84f24b03b7294c58",
            "98079d786f1e4dabb6a28f0a842ad9a0",
            "a8a74cc14bc94b8e8054a05af2049644",
            "ad2704b858834b73a58be498e53de030",
            "cf7afd38e38e4a348e236198e9a63eb5",
            "12db8791ce5f46abb4cdeb7d9330b2fb",
            "a21c360c32a541198556e0ae3f4f1a89",
            "dcc65c86cc3c4cb183774370ccb9ef35",
            "34627ff5795b4815a613e76033390e17",
            "c297590915284327a91103c41a2aa339",
            "261e1db7321b4a36bf32851eb2e90a16",
            "a4d76e7bc11f4948a19d05afb37e2243",
            "f796a39e0cbc4df4a061f24c5e2d4a3a",
            "0bedc28a677b43ee808dc7157ba8d9d2",
            "5569b6bab0de49089f48043d02c9185d",
            "1f9b5413fe284adcbb531845ec0e9f20",
            "c25003e134424b75ab0b1e3eb115aafa",
            "3d5bebb9cf704c85b33ce6902855b8e3",
            "1d088fe9368b4d29b69ed65c52c27585",
            "e4da064a489b4561b3b027b5d95160e0",
            "d4fb6b6e84e24dcd8b24398f4e7cfcf4",
            "f8f408547a7c4abaa91256082dd21683",
            "c3da4c8bdfed4414b00984099abcc648",
            "1c8399879a3a4300a168db5f073a58b9",
            "50fe85d271444c8ebf15aefe7b2b79fb",
            "27567505e38346928110698d74c6c0bf",
            "c7668c9a8548465c936169d58314ad4e",
            "bb105c41caef419b90c4163fc8897f50",
            "5ab4cdb048324dde82228b496ab35990",
            "fa815a5fcbfc4aa880edf74b0f21192c",
            "3d6446c6ddf54550a8cc06dcd38a0b72",
            "18c5a4231c92432a895ede812c7b0e85",
            "b1ca6754e484432cb6680a01bc22707c",
            "1c0097c8eb904d64860dfb45d4ba5b65",
            "95d517b3d9974581bbcc417a7ab6df79",
            "54430d25db5949d7957b02031f7dd96b",
            "cb0c27805cab479fb95a769e7f6dd2dc",
            "4b7c25f199cd4f5798da6b9a2dc720c9",
            "c0fcd02ef71141219e1d22377d6f6078",
            "177d25017f754ce69c603ce577bc380b",
            "c3210f0143fd44539a2a38d61c77495e",
            "c513220b0c9c42e98409366f9dc0a5ed",
            "fd73197747774174994b9a4f690a7743",
            "a17f0695077647c0af22f013d1faab44",
            "8305e7863fba462a945b9fa1a4cbbd5f",
            "3560907a769e4e0b95cb028a1194ed30",
            "ef31f65ad37542408daeb02aebfa3450",
            "aa5561aef3bb4832af9a765092844ebc",
            "7662580e0e2b4699a804da7b1911e587",
            "15c8da62952b43c9a2cf95a8f732c421",
            "d950f71b940e4220b1b457d654de139c",
            "c6d132d3c9dc4e62a8df4fcd3c4f1097",
            "8edc8e3bcbb645e8b27ad85b1cb819f7",
            "e231b60aa74d4d9eaa0a7228a6a039bb",
            "925e12f42d3b4f43a0c0719f6ef36fa5",
            "dd1a5819a65f4f19bc034d370083fc0c",
            "21562e108a4645aaabdfe65a0a9bc964",
            "9a02e14c92a44880a65fbbb8ea3e37c9",
            "cd8c53cd02dd4ac7a9d07e7c7057e8ae",
            "0dd3121aadb148179f5dfa54a0a65c8d",
            "3ded9292bded4a61b4e525007915c9d5",
            "7d9c98c0cb30458fa62eca36c37ff7cd",
            "478ec17485664ea0affe3d60c9307741",
            "ec8869628fe74d3db1ecfff699087e0f",
            "2cc538b883ba4f83aa3ddd12673d3f9a",
            "3854e43ca3964ca6a38c8c30f3c2821b",
            "b69bc867f2334b65a17190ab36cb3fba",
            "f0bd04bbcb1346608c2ebdeb7451a7a4",
            "7c36b5326b9340608296f6bb2ecc072b",
            "797dfb21617a495b9f717f21cbd75eb7",
            "a159a21baeec47ee8841ce57395d52c1",
            "6f042a5c12564d6899a8c5d4b23d9e4a",
            "f209ff3d23e447f8ab95d8efcc6c1a07",
            "29d2d7e901344c77b480d985f1325c2f",
            "da82ebef81c84aaf84af38fb4c89a7ce",
            "342a42ff91d54ab4b77a690e1541c230",
            "1833d4769aee4dabbff1d2dcd5b61a11",
            "197b22ee91854ea8ba8491e8b395b251",
            "ff7d01cd54924cb3afbad16975bcc4a9",
            "f8add1c80cc7464594dcfc63b92a1397",
            "7077884b8be14f379170988fffcd82f6",
            "d0e6b1f89d064960af09a1a4d7d8d4ef",
            "14311489214847e39e944d8c3d15dbd5",
            "a846b8db868c48e0aa39dc789d292bdf",
            "3b8928456f9c490f99f0d721a5770c22",
            "1fe9d7a603e044b5b8a55e57aaf61d5d",
            "39f6ae7f95c246cead8dc3938e697dac",
            "efd9c50c22bf4a46a0f640e3a1fb9d8b",
            "c61f585303df4e1a8b61a896b98f9e89",
            "9428d1bac50f4a1a907383e2f230d7b1",
            "95375a35ec8b4dd3a980d555c50f9684",
            "02cc633a65cb4dacb27214a03f42011c",
            "85f5c8bfa1354fdfb99b74236f4bfe1e",
            "c054b0abe80445ae8321a6e7496d55dc",
            "18c098f3577c4564be9b3f5fd7dc356b",
            "691619fe27d043a0854aace716f04775",
            "c63de00550bd4e5f8eec65b0b293ed11",
            "e8037c7b0df7425d82f37e179e3506ea",
            "01dc1eec48804197a757fe0820ebaf55",
            "81f8cc1ca5044135bd1837473d6725b4",
            "0bab647f96624af49a44c2615da5b64c",
            "00d47743221e4791a015cb86ba1db65e",
            "4424e2d8887649e8b6635d454a46ef61",
            "51b4807d83064612a191bb694aa814e9"
          ]
        },
        "id": "PmZJYTle3xGZ",
        "outputId": "abba1c72-5a89-44ba-f547-0c404adebf75"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/huggingface_hub/utils/_token.py:88: UserWarning: \n",
            "The secret `HF_TOKEN` does not exist in your Colab secrets.\n",
            "To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n",
            "You will be able to reuse this secret in all of your notebooks.\n",
            "Please note that authentication is recommended but still optional to access public models or datasets.\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/26.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "18d37c1c2ee24062aef1a0dbefdd1c37"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.json:   0%|          | 0.00/1.04M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7ccb3da4d2f54c09bba23e25ba0dc7ac"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "7a62cd7bb6ee455596ae9006d88c81a4"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/1.36M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "12db8791ce5f46abb4cdeb7d9330b2fb"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/665 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c25003e134424b75ab0b1e3eb115aafa"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/548M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "bb105c41caef419b90c4163fc8897f50"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "generation_config.json:   0%|          | 0.00/124 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c0fcd02ef71141219e1d22377d6f6078"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer_config.json:   0%|          | 0.00/48.0 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "15c8da62952b43c9a2cf95a8f732c421"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "vocab.txt:   0%|          | 0.00/232k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "3ded9292bded4a61b4e525007915c9d5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "tokenizer.json:   0%|          | 0.00/466k [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6f042a5c12564d6899a8c5d4b23d9e4a"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "config.json:   0%|          | 0.00/570 [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "14311489214847e39e944d8c3d15dbd5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "model.safetensors:   0%|          | 0.00/440M [00:00<?, ?B/s]"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "c054b0abe80445ae8321a6e7496d55dc"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Updated example selected by the RL agent:\n",
            "To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\n",
            "Selected Ontology: Euler's rotation theorem\n",
            "Reason: According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
            "Coherent Response with Relations and Analysis:\n",
            "The following concepts were identified: Euler's rotation theorem. Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\n",
            "Length of probabilities array: 2\n",
            "Length of keys in ontology_reasons dictionary: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "import numpy as np\n",
        "from rdflib import Graph, Namespace, RDF, OWL, RDFS, Literal, XSD\n",
        "import spacy\n",
        "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
        "import re  # Import the regular expression module for pattern matching\n",
        "\n",
        "# Define namespaces\n",
        "ex = Namespace(\"http://example.org/physics#\")\n",
        "\n",
        "# Create an RDF graph\n",
        "g = Graph()\n",
        "\n",
        "# Classes\n",
        "g.add((ex.Mass, RDF.type, OWL.Class))\n",
        "g.add((ex.Length, RDF.type, OWL.Class))\n",
        "g.add((ex.Rotation, RDF.type, OWL.Class))\n",
        "g.add((ex.Axis, RDF.type, OWL.Class))\n",
        "g.add((ex.Work, RDF.type, OWL.Class))\n",
        "\n",
        "# Properties\n",
        "g.add((ex.hasMass, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasMass, RDFS.domain, ex.Mass))\n",
        "g.add((ex.hasMass, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasLength, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasLength, RDFS.domain, ex.Length))\n",
        "g.add((ex.hasLength, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasAngularSpeed, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasAngularSpeed, RDFS.domain, ex.Rotation))\n",
        "g.add((ex.hasAngularSpeed, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasWork, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasWork, RDFS.domain, ex.Work))\n",
        "g.add((ex.hasWork, RDFS.range, ex.Axis))\n",
        "\n",
        "# Axioms\n",
        "g.add((ex.conservationOfAngularMomentum, RDF.type, OWL.Axiom))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedSource, ex.Rotation))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedProperty, ex.hasAngularSpeed))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "g.add((ex.workEnergyPrinciple, RDF.type, OWL.Axiom))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedSource, ex.Work))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedProperty, ex.hasWork))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "# Rules\n",
        "g.add((ex.minWorkAxisDistance, RDF.type, OWL.DatatypeProperty))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.domain, ex.Work))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.range, XSD.double))\n",
        "\n",
        "# Individuals\n",
        "g.add((ex.mass1, RDF.type, ex.Mass))\n",
        "g.add((ex.mass1, ex.hasMass, Literal(\"0.3\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.mass2, RDF.type, ex.Mass))\n",
        "g.add((ex.mass2, ex.hasMass, Literal(\"0.7\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.rod, RDF.type, ex.Axis))\n",
        "g.add((ex.rod, ex.hasLength, Literal(\"1.4\", datatype=XSD.double)))\n",
        "g.add((ex.rod, ex.hasMass, Literal(\"negligible\", datatype=XSD.string)))\n",
        "\n",
        "# Load the GPT-2 tokenizer and model\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\n",
        "model = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n",
        "\n",
        "# Load pre-trained BERT model and tokenizer\n",
        "bert_tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "bert_model = BertForSequenceClassification.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Initialize Spacy for natural language processing\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Define section headers for each key point\n",
        "section_headers = {\n",
        "    \"Introduction\": [\"In rotational dynamics\"],\n",
        "    \"Work-Energy Principle\": [\"work-energy principle states that\"],\n",
        "    \"Mass Distribution Impact\": [\"distribution of mass along the axis\"],\n",
        "    \"Optimal Axis of Rotation\": [\"minimizing the work done\"],\n",
        "}\n",
        "\n",
        "# Define the contextualized example\n",
        "learner_background = \"The learner has a background in engineering and is interested in practical applications of physics.\"\n",
        "context_example = \"To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\"\n",
        "\n",
        "# Apply reinforcement learning to adaptively select examples\n",
        "class RLAgent:\n",
        "    def __init__(self):\n",
        "        self.example_selected = context_example\n",
        "\n",
        "    def update_example(self, learner_response):\n",
        "        # Simplified reward function based on learner's response\n",
        "        if learner_response == \"Relevant\":\n",
        "            reward = 1\n",
        "        else:\n",
        "            reward = -1\n",
        "\n",
        "        # Simplified Q-learning update rule\n",
        "        # In a real implementation, you would use more sophisticated algorithms\n",
        "        # Update the example based on the learner's response\n",
        "        if reward > 0:\n",
        "            self.example_selected = context_example\n",
        "\n",
        "# Simulated interaction with the learner\n",
        "learner_response = \"Relevant\"  # The learner finds the example relevant\n",
        "\n",
        "# Initialize RL agent\n",
        "agent = RLAgent()\n",
        "\n",
        "# Update example based on learner's response\n",
        "agent.update_example(learner_response)\n",
        "\n",
        "# Print the updated example selected by the RL agent\n",
        "print(\"Updated example selected by the RL agent:\")\n",
        "print(agent.example_selected)\n",
        "\n",
        "# Define a function to generate coherent responses based on the identified ontology elements, logical connectives, semantic analysis, pattern matching, and domain heuristics\n",
        "def generate_coherent_response_with_relations_and_analysis(ontology_elements, logical_connectives, text):\n",
        "    coherent_response = \"\"\n",
        "\n",
        "    # Generate coherent response based on identified ontology elements\n",
        "    if ontology_elements:\n",
        "        coherent_response += \"The following concepts were identified: \\n\"\n",
        "        for elem in ontology_elements:\n",
        "            coherent_response += f\"{elem}: {ontology_reasons.get(elem, 'Reason not found')}\\n\"\n",
        "        coherent_response += \"\\n\"\n",
        "\n",
        "    # Add logical connectives to the coherent response\n",
        "    if logical_connectives:\n",
        "        coherent_response += \"The following logical connectives were identified: \"\n",
        "        coherent_response += \", \".join(logical_connectives)\n",
        "        coherent_response += \". \\n\"\n",
        "\n",
        "    # Identify relationships between ontology elements and logical connectives using pattern matching and semantic analysis\n",
        "    relationships = {}\n",
        "    for elem in ontology_elements:\n",
        "        for conn in logical_connectives:\n",
        "            if elem.lower() in text.lower() and conn.lower() in text.lower():\n",
        "                if elem in relationships:\n",
        "                    relationships[elem].append(conn)\n",
        "                else:\n",
        "                    relationships[elem] = [conn]\n",
        "\n",
        "    # Add relationships to the coherent response\n",
        "    if relationships:\n",
        "        coherent_response += \"The relationships between ontology elements and logical connectives are as follows:\\n\"\n",
        "        for elem, conns in relationships.items():\n",
        "            coherent_response += f\"{elem}: {', '.join(conns)}\\n\"\n",
        "\n",
        "    # Incorporate domain heuristics\n",
        "    domain_heuristics = []\n",
        "\n",
        "    # Example domain heuristic: Stability of Rotation\n",
        "    if \"stable rotation\" in text or \"no torque required\" in text:\n",
        "        domain_heuristics.append(\"Stability of Rotation\")\n",
        "\n",
        "    # Include domain heuristics in the coherent response\n",
        "    if domain_heuristics:\n",
        "        coherent_response += \"Domain heuristics identified: \"\n",
        "        coherent_response += \", \".join(domain_heuristics) + \"\\n\"\n",
        "\n",
        "    # Add a concluding statement\n",
        "    coherent_response += \"Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\"\n",
        "\n",
        "    return coherent_response\n",
        "\n",
        "# Identify Logical Connectives from Input Text\n",
        "def identify_logical_connectives(text):\n",
        "    logical_connectives = []\n",
        "    doc = nlp(text)\n",
        "    for token in doc:\n",
        "        if token.pos_ == \"SCONJ\" or token.pos_ == \"CCONJ\":\n",
        "            logical_connectives.append(token.text.lower())\n",
        "    return logical_connectives\n",
        "\n",
        "# Identify Euler's Rotation Theorem from Input Text\n",
        "def identify_eulers_rotation_theorem(text):\n",
        "    theorem_match = re.search(r\"Euler's rotation theorem\", text)\n",
        "    if theorem_match:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "# Relevant information from the extracted text\n",
        "response_text = \"\"\"\n",
        "Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space. This type of motion excludes the possibility of the instantaneous axis of rotation changing its orientation and cannot describe such phenomena as wobbling or precession. According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
        "\n",
        "This concept assumes that the rotation is also stable, such that no torque is required to keep it going. The kinematics and dynamics of rotation around a fixed axis of a rigid body are mathematically much simpler than those for free rotation of a rigid body; they are entirely analogous to those of linear motion along a single fixed direction, which is not true for free rotation of a rigid body. The expressions for the kinetic energy of the object, and for the forces on the parts of the object, are also simpler for rotation around a fixed axis, than for general rotational motion. For these reasons, rotation around a fixed axis is typically taught in introductory physics courses after students have mastered linear motion; the full generality of rotational motion is not usually taught in introductory physics classes.\n",
        "\"\"\"\n",
        "\n",
        "# Tokenize the response text\n",
        "input_ids = bert_tokenizer.encode(response_text, return_tensors='pt', max_length=512, truncation=True)\n",
        "\n",
        "# Perform semantic analysis using the BERT model\n",
        "with torch.no_grad():\n",
        "    outputs = bert_model(input_ids)\n",
        "\n",
        "# Extract the logits from the output\n",
        "logits = outputs.logits\n",
        "\n",
        "# Convert logits to probabilities using softmax\n",
        "probabilities = torch.softmax(logits, dim=1).squeeze().numpy()\n",
        "\n",
        "# Extract ontology and reasons based on probabilities\n",
        "ontology_reasons = {\n",
        "    \"Rotation\": \"Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space.\",\n",
        "    \"Euler's rotation theorem\": \"According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\"\n",
        "}\n",
        "\n",
        "# Normalize probabilities\n",
        "normalized_probabilities = probabilities / np.sum(probabilities)\n",
        "\n",
        "# Sample ontology and reasons based on probabilities\n",
        "selected_ontology_reason = np.random.choice(list(ontology_reasons.keys()), p=normalized_probabilities, size=1, replace=False)[0]\n",
        "\n",
        "# Print the selected ontology and reason\n",
        "print(\"Selected Ontology:\", selected_ontology_reason)\n",
        "print(\"Reason:\", ontology_reasons[selected_ontology_reason])\n",
        "\n",
        "# Identify Euler's rotation theorem in the response text\n",
        "has_eulers_theorem = identify_eulers_rotation_theorem(response_text)\n",
        "\n",
        "# Generate coherent response with relations and analysis based on the selected ontology and reason\n",
        "coherent_response_with_relations_and_analysis = generate_coherent_response_with_relations_and_analysis(\n",
        "    [selected_ontology_reason],\n",
        "    [],\n",
        "    ontology_reasons[selected_ontology_reason]\n",
        ")\n",
        "\n",
        "# Print the coherent response with relations and analysis\n",
        "print(\"Coherent Response with Relations and Analysis:\")\n",
        "print(coherent_response_with_relations_and_analysis)\n",
        "print(\"Length of probabilities array:\", len(probabilities))\n",
        "print(\"Length of keys in ontology_reasons dictionary:\", len(ontology_reasons))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZHBg7WbY4_7p",
        "outputId": "480cc010-06ac-4e97-b312-2a54eb68941f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Updated example selected by the RL agent:\n",
            "To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\n",
            "Selected Ontology: Euler's rotation theorem\n",
            "Reason: According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
            "Coherent Response with Relations and Analysis:\n",
            "The following concepts were identified: \n",
            "Euler's rotation theorem: According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
            "\n",
            "Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\n",
            "Length of probabilities array: 2\n",
            "Length of keys in ontology_reasons dictionary: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "import numpy as np\n",
        "from rdflib import Graph, Namespace, RDF, OWL, RDFS, Literal, XSD\n",
        "import spacy\n",
        "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
        "import re  # Import the regular expression module for pattern matching\n",
        "\n",
        "# Define namespaces\n",
        "ex = Namespace(\"http://example.org/physics#\")\n",
        "\n",
        "# Create an RDF graph\n",
        "g = Graph()\n",
        "\n",
        "# Classes\n",
        "g.add((ex.Mass, RDF.type, OWL.Class))\n",
        "g.add((ex.Length, RDF.type, OWL.Class))\n",
        "g.add((ex.Rotation, RDF.type, OWL.Class))\n",
        "g.add((ex.Axis, RDF.type, OWL.Class))\n",
        "g.add((ex.Work, RDF.type, OWL.Class))\n",
        "\n",
        "# Properties\n",
        "g.add((ex.hasMass, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasMass, RDFS.domain, ex.Mass))\n",
        "g.add((ex.hasMass, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasLength, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasLength, RDFS.domain, ex.Length))\n",
        "g.add((ex.hasLength, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasAngularSpeed, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasAngularSpeed, RDFS.domain, ex.Rotation))\n",
        "g.add((ex.hasAngularSpeed, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasWork, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasWork, RDFS.domain, ex.Work))\n",
        "g.add((ex.hasWork, RDFS.range, ex.Axis))\n",
        "\n",
        "# Axioms\n",
        "g.add((ex.conservationOfAngularMomentum, RDF.type, OWL.Axiom))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedSource, ex.Rotation))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedProperty, ex.hasAngularSpeed))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "g.add((ex.workEnergyPrinciple, RDF.type, OWL.Axiom))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedSource, ex.Work))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedProperty, ex.hasWork))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "# Rules\n",
        "g.add((ex.minWorkAxisDistance, RDF.type, OWL.DatatypeProperty))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.domain, ex.Work))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.range, XSD.double))\n",
        "\n",
        "# Individuals\n",
        "g.add((ex.mass1, RDF.type, ex.Mass))\n",
        "g.add((ex.mass1, ex.hasMass, Literal(\"0.3\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.mass2, RDF.type, ex.Mass))\n",
        "g.add((ex.mass2, ex.hasMass, Literal(\"0.7\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.rod, RDF.type, ex.Axis))\n",
        "g.add((ex.rod, ex.hasLength, Literal(\"1.4\", datatype=XSD.double)))\n",
        "g.add((ex.rod, ex.hasMass, Literal(\"negligible\", datatype=XSD.string)))\n",
        "\n",
        "# Load the GPT-2 tokenizer and model\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\n",
        "model = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n",
        "\n",
        "# Load pre-trained BERT model and tokenizer\n",
        "bert_tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "bert_model = BertForSequenceClassification.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Initialize Spacy for natural language processing\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Define section headers for each key point\n",
        "section_headers = {\n",
        "    \"Introduction\": [\"In rotational dynamics\"],\n",
        "    \"Work-Energy Principle\": [\"work-energy principle states that\"],\n",
        "    \"Mass Distribution Impact\": [\"distribution of mass along the axis\"],\n",
        "    \"Optimal Axis of Rotation\": [\"minimizing the work done\"],\n",
        "}\n",
        "\n",
        "# Define the contextualized example\n",
        "learner_background = \"The learner has a background in engineering and is interested in practical applications of physics.\"\n",
        "context_example = \"To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\"\n",
        "\n",
        "# Apply reinforcement learning to adaptively select examples\n",
        "class RLAgent:\n",
        "    def __init__(self):\n",
        "        self.example_selected = context_example\n",
        "\n",
        "    def update_example(self, learner_response):\n",
        "        # Simplified reward function based on learner's response\n",
        "        if learner_response == \"Relevant\":\n",
        "            reward = 1\n",
        "        else:\n",
        "            reward = -1\n",
        "\n",
        "        # Simplified Q-learning update rule\n",
        "        # In a real implementation, you would use more sophisticated algorithms\n",
        "        # Update the example based on the learner's response\n",
        "        if reward > 0:\n",
        "            self.example_selected = context_example\n",
        "\n",
        "# Simulated interaction with the learner\n",
        "learner_response = \"Relevant\"  # The learner finds the example relevant\n",
        "\n",
        "# Initialize RL agent\n",
        "agent = RLAgent()\n",
        "\n",
        "# Update example based on learner's response\n",
        "agent.update_example(learner_response)\n",
        "\n",
        "# Print the updated example selected by the RL agent\n",
        "print(\"Updated example selected by the RL agent:\")\n",
        "print(agent.example_selected)\n",
        "\n",
        "# Define a function to generate coherent responses based on the identified ontology elements, logical connectives, semantic analysis, pattern matching, and domain heuristics\n",
        "def generate_coherent_response_with_relations_and_analysis(ontology_elements, logical_connectives, text):\n",
        "    coherent_response = \"\"\n",
        "\n",
        "    # Explanations for each ontology element\n",
        "    ontology_explanations = {\n",
        "        \"Mass\": \"Mass is a fundamental property of matter, representing the amount of substance in an object. In rotational dynamics, the distribution of mass along the axis of rotation affects the rotational behavior and stability of the object.\",\n",
        "        \"Length\": \"Length represents the extent of an object along a particular dimension. In rotational dynamics, the length of an axis of rotation influences the moment of inertia and rotational speed of the object.\",\n",
        "        \"Rotation\": \"Rotation refers to the circular movement of an object around a fixed axis. In rotational dynamics, understanding the principles of rotation is essential for analyzing the motion and stability of rotating objects.\",\n",
        "        \"Axis\": \"An axis is a line about which an object rotates or is symmetrically arranged. In rotational dynamics, the choice of axis affects the calculation of rotational quantities such as angular velocity and angular momentum.\",\n",
        "        \"Work\": \"Work is the transfer of energy that occurs when a force is applied to move an object over a distance. In rotational dynamics, work is related to the torque applied to rotate an object around an axis.\",\n",
        "    }\n",
        "\n",
        "    # Generate coherent response based on identified ontology elements\n",
        "    if ontology_elements:\n",
        "        coherent_response += \"The following concepts were identified: \\n\"\n",
        "        for elem in ontology_elements:\n",
        "            coherent_response += f\"{elem}: {ontology_reasons.get(elem, 'Reason not found')}\\n\"\n",
        "            # Provide an explanation for each ontology element to the learner\n",
        "            explanation = ontology_explanations.get(elem, \"Explanation not found\")\n",
        "            if explanation:\n",
        "                coherent_response += f\"Explanation: {explanation}\\n\"\n",
        "\n",
        "    # Add logical connectives if identified\n",
        "    if logical_connectives:\n",
        "        coherent_response += \"Logical connectives identified: \"\n",
        "        coherent_response += \", \".join(logical_connectives) + \"\\n\"\n",
        "\n",
        "    # Add a concluding statement\n",
        "    coherent_response += \"Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\"\n",
        "\n",
        "    return coherent_response\n",
        "\n",
        "# Identify Logical Connectives from Input Text\n",
        "def identify_logical_connectives(text):\n",
        "    logical_connectives = []\n",
        "    doc = nlp(text)\n",
        "    for token in doc:\n",
        "        if token.pos_ == \"SCONJ\" or token.pos_ == \"CCONJ\":\n",
        "            logical_connectives.append(token.text.lower())\n",
        "    return logical_connectives\n",
        "\n",
        "# Identify Euler's Rotation Theorem from Input Text\n",
        "def identify_eulers_rotation_theorem(text):\n",
        "    theorem_match = re.search(r\"Euler's rotation theorem\", text)\n",
        "    if theorem_match:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "# Relevant information from the extracted text\n",
        "response_text = \"\"\"\n",
        "Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space. This type of motion excludes the possibility of the instantaneous axis of rotation changing its orientation and cannot describe such phenomena as wobbling or precession. According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
        "\n",
        "This concept assumes that the rotation is also stable, such that no torque is required to keep it going. The kinematics and dynamics of rotation around a fixed axis of a rigid body are mathematically much simpler than those for free rotation of a rigid body; they are entirely analogous to those of linear motion along a single fixed direction, which is not true for free rotation of a rigid body. The expressions for the kinetic energy of the object, and for the forces on the parts of the object, are also simpler for rotation around a fixed axis, than for general rotational motion. For these reasons, rotation around a fixed axis is typically taught in introductory physics courses after students have mastered linear motion; the full generality of rotational motion is not usually taught in introductory physics classes.\n",
        "\"\"\"\n",
        "\n",
        "# Tokenize the response text\n",
        "input_ids = bert_tokenizer.encode(response_text, return_tensors='pt', max_length=512, truncation=True)\n",
        "\n",
        "# Perform semantic analysis using the BERT model\n",
        "with torch.no_grad():\n",
        "    outputs = bert_model(input_ids)\n",
        "\n",
        "# Extract the logits from the output\n",
        "logits = outputs.logits\n",
        "\n",
        "# Convert logits to probabilities using softmax\n",
        "probabilities = torch.softmax(logits, dim=1).squeeze().numpy()\n",
        "\n",
        "# Extract ontology and reasons based on probabilities\n",
        "ontology_reasons = {\n",
        "    \"Rotation\": \"Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space.\",\n",
        "    \"Euler's rotation theorem\": \"According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\"\n",
        "}\n",
        "\n",
        "# Normalize probabilities\n",
        "normalized_probabilities = probabilities / np.sum(probabilities)\n",
        "\n",
        "# Sample ontology and reasons based on probabilities\n",
        "selected_ontology_reason = np.random.choice(list(ontology_reasons.keys()), p=normalized_probabilities, size=1, replace=False)[0]\n",
        "\n",
        "# Print the selected ontology and reason\n",
        "print(\"Selected Ontology:\", selected_ontology_reason)\n",
        "print(\"Reason:\", ontology_reasons[selected_ontology_reason])\n",
        "\n",
        "# Identify Euler's rotation theorem in the response text\n",
        "has_eulers_theorem = identify_eulers_rotation_theorem(response_text)\n",
        "\n",
        "# Generate coherent response with relations and analysis based on the selected ontology and reason\n",
        "coherent_response_with_relations_and_analysis = generate_coherent_response_with_relations_and_analysis(\n",
        "    [selected_ontology_reason],\n",
        "    [],\n",
        "    ontology_reasons[selected_ontology_reason]\n",
        ")\n",
        "\n",
        "# Print the coherent response with relations and analysis\n",
        "print(\"Coherent Response with Relations and Analysis:\")\n",
        "print(coherent_response_with_relations_and_analysis)\n",
        "print(\"Length of probabilities array:\", len(probabilities))\n",
        "print(\"Length of keys in ontology_reasons dictionary:\", len(ontology_reasons))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s423uGdZ5wzp",
        "outputId": "b2ed4d3c-eff6-402d-a240-bf740e72b9fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Updated example selected by the RL agent:\n",
            "To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\n",
            "Selected Ontology: Rotation\n",
            "Reason: Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space.\n",
            "Coherent Response with Relations and Analysis:\n",
            "The following concepts were identified: \n",
            "Rotation: Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space.\n",
            "Explanation: Rotation refers to the circular movement of an object around a fixed axis. In rotational dynamics, understanding the principles of rotation is essential for analyzing the motion and stability of rotating objects.\n",
            "Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\n",
            "Length of probabilities array: 2\n",
            "Length of keys in ontology_reasons dictionary: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from rdflib import Graph, Namespace, RDF, OWL, RDFS, Literal, XSD\n",
        "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
        "import numpy as np\n",
        "import spacy\n",
        "import torch\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "import re  # Import the regular expression module for pattern matching\n",
        "\n",
        "# Define namespaces\n",
        "ex = Namespace(\"http://example.org/physics#\")\n",
        "\n",
        "# Create an RDF graph\n",
        "g = Graph()\n",
        "\n",
        "# Classes\n",
        "g.add((ex.Mass, RDF.type, OWL.Class))\n",
        "g.add((ex.Length, RDF.type, OWL.Class))\n",
        "g.add((ex.Rotation, RDF.type, OWL.Class))\n",
        "g.add((ex.Axis, RDF.type, OWL.Class))\n",
        "g.add((ex.Work, RDF.type, OWL.Class))\n",
        "\n",
        "# Properties\n",
        "g.add((ex.hasMass, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasMass, RDFS.domain, ex.Mass))\n",
        "g.add((ex.hasMass, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasLength, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasLength, RDFS.domain, ex.Length))\n",
        "g.add((ex.hasLength, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasAngularSpeed, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasAngularSpeed, RDFS.domain, ex.Rotation))\n",
        "g.add((ex.hasAngularSpeed, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasWork, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasWork, RDFS.domain, ex.Work))\n",
        "g.add((ex.hasWork, RDFS.range, ex.Axis))\n",
        "\n",
        "# Axioms\n",
        "g.add((ex.conservationOfAngularMomentum, RDF.type, OWL.Axiom))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedSource, ex.Rotation))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedProperty, ex.hasAngularSpeed))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "g.add((ex.workEnergyPrinciple, RDF.type, OWL.Axiom))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedSource, ex.Work))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedProperty, ex.hasWork))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "# Rules\n",
        "g.add((ex.minWorkAxisDistance, RDF.type, OWL.DatatypeProperty))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.domain, ex.Work))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.range, XSD.double))\n",
        "\n",
        "# Individuals\n",
        "g.add((ex.mass1, RDF.type, ex.Mass))\n",
        "g.add((ex.mass1, ex.hasMass, Literal(\"0.3\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.mass2, RDF.type, ex.Mass))\n",
        "g.add((ex.mass2, ex.hasMass, Literal(\"0.7\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.rod, RDF.type, ex.Axis))\n",
        "g.add((ex.rod, ex.hasLength, Literal(\"1.4\", datatype=XSD.double)))\n",
        "g.add((ex.rod, ex.hasMass, Literal(\"negligible\", datatype=XSD.string)))\n",
        "\n",
        "# Load the GPT-2 tokenizer and model\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\n",
        "model = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n",
        "\n",
        "# Load pre-trained BERT model and tokenizer\n",
        "bert_tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "bert_model = BertForSequenceClassification.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Initialize Spacy for natural language processing\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Define section headers for each key point\n",
        "section_headers = {\n",
        "    \"Introduction\": [\"In rotational dynamics\"],\n",
        "    \"Work-Energy Principle\": [\"work-energy principle states that\"],\n",
        "    \"Mass Distribution Impact\": [\"distribution of mass along the axis\"],\n",
        "    \"Optimal Axis of Rotation\": [\"minimizing the work done\"],\n",
        "}\n",
        "\n",
        "# Define the contextualized example\n",
        "learner_background = \"The learner has a background in engineering and is interested in practical applications of physics.\"\n",
        "context_example = \"To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\"\n",
        "\n",
        "# Apply reinforcement learning to adaptively select examples\n",
        "class RLAgent:\n",
        "    def __init__(self):\n",
        "        self.example_selected = context_example\n",
        "\n",
        "    def update_example(self, learner_response):\n",
        "        # Simplified reward function based on learner's response\n",
        "        if learner_response == \"Relevant\":\n",
        "            reward = 1\n",
        "        else:\n",
        "            reward = -1\n",
        "\n",
        "        # Simplified Q-learning update rule\n",
        "        # In a real implementation, you would use more sophisticated algorithms\n",
        "        # Update the example based on the learner's response\n",
        "        if reward > 0:\n",
        "            self.example_selected = context_example\n",
        "\n",
        "# Simulated interaction with the learner\n",
        "learner_response = \"Relevant\"  # The learner finds the example relevant\n",
        "\n",
        "# Initialize RL agent\n",
        "agent = RLAgent()\n",
        "\n",
        "# Update example based on learner's response\n",
        "agent.update_example(learner_response)\n",
        "\n",
        "# Print the updated example selected by the RL agent\n",
        "print(\"Updated example selected by the RL agent:\")\n",
        "print(agent.example_selected)\n",
        "\n",
        "# Define a function to generate coherent responses based on the identified ontology elements, logical connectives, semantic analysis, pattern matching, and domain heuristics\n",
        "def generate_coherent_response_with_relations_and_analysis(ontology_elements, logical_connectives, text):\n",
        "    coherent_response = \"\"\n",
        "\n",
        "    # Generate coherent response based on identified ontology elements\n",
        "    if ontology_elements:\n",
        "        coherent_response += \"The following concepts were identified: \"\n",
        "        coherent_response += \", \".join(ontology_elements)\n",
        "        coherent_response += \". \"\n",
        "\n",
        "    # Add logical connectives to the coherent response\n",
        "    if logical_connectives:\n",
        "        coherent_response += \"The following logical connectives were identified: \"\n",
        "        coherent_response += \", \".join(logical_connectives)\n",
        "        coherent_response += \". \"\n",
        "\n",
        "    # Identify relationships between ontology elements and logical connectives using pattern matching and semantic analysis\n",
        "    relationships = {}\n",
        "    for elem in ontology_elements:\n",
        "        for conn in logical_connectives:\n",
        "            if elem.lower() in text.lower() and conn.lower() in text.lower():\n",
        "                if elem in relationships:\n",
        "                    relationships[elem].append(conn)\n",
        "                else:\n",
        "                    relationships[elem] = [conn]\n",
        "\n",
        "    # Add relationships to the coherent response\n",
        "    if relationships:\n",
        "        coherent_response += \"The relationships between ontology elements and logical connectives are as follows:\\n\"\n",
        "        for elem, conns in relationships.items():\n",
        "            coherent_response += f\"{elem}: {', '.join(conns)}\\n\"\n",
        "\n",
        "    # Incorporate domain heuristics\n",
        "    domain_heuristics = []\n",
        "\n",
        "    # Example domain heuristic: Stability of Rotation\n",
        "    if \"stable rotation\" in text or \"no torque required\" in text:\n",
        "        domain_heuristics.append(\"Stability of Rotation\")\n",
        "\n",
        "    # Include domain heuristics in the coherent response\n",
        "    if domain_heuristics:\n",
        "        coherent_response += \"Domain heuristics identified:\\n\"\n",
        "        coherent_response += \", \".join(domain_heuristics)\n",
        "\n",
        "    return coherent_response\n",
        "\n",
        "\n",
        "# Define a function to analyze relationships, logical connectives, and domain heuristics\n",
        "def analyze_relationships_and_domain(text):\n",
        "    relationships = []\n",
        "    logical_connectives = identify_logical_connectives(text)\n",
        "    domain_insights = []\n",
        "\n",
        "    # Analyze relationships between ontology elements\n",
        "    if \"Rotation\" in text and \"Axis\" in text:\n",
        "        relationships.append(\"Rotation and Axis are closely related in rotational dynamics.\")\n",
        "    if \"Euler's rotation theorem\" in text and \"Rotation\" in text:\n",
        "        relationships.append(\"Euler's rotation theorem provides insights into the behavior of Rotation in three-dimensional space.\")\n",
        "\n",
        "    # Apply domain heuristics\n",
        "    if \"Euler's rotation theorem\" in text:\n",
        "        domain_insights.append(\"Euler's rotation theorem establishes fundamental constraints on rotational motion, impacting our understanding of rotational dynamics.\")\n",
        "\n",
        "    return relationships, logical_connectives, domain_insights\n",
        "\n",
        "\n",
        "# Define a function to identify logical connectives in the text\n",
        "def identify_logical_connectives(text):\n",
        "    # Regular expression pattern to match logical connectives\n",
        "    pattern = r\"(and|or|not)\"\n",
        "    matches = re.findall(pattern, text, re.IGNORECASE)\n",
        "    return matches\n",
        "\n",
        "\n",
        "# Extracted text for analysis\n",
        "response_text = \"\"\"\n",
        "Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space. This type of motion excludes the possibility of the instantaneous axis of rotation changing its orientation and cannot describe such phenomena as wobbling or precession. According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
        "\n",
        "This concept assumes that the rotation is also stable, such that no torque is required to keep it going. The kinematics and dynamics of rotation around a fixed axis of a rigid body are mathematically much simpler than those for free rotation of a rigid body; they are entirely analogous to those of linear motion along a single fixed direction, which is not true for free rotation of a rigid body. The expressions for the kinetic energy of the object, and for the forces on the parts of the object, are also simpler for rotation around a fixed axis, than for general rotational motion. For these reasons, rotation around a fixed axis is typically taught in introductory physics courses after students have mastered linear motion; the full generality of rotational motion is not usually taught in introductory physics classes.\n",
        "\"\"\"\n",
        "\n",
        "# Analyze relationships, logical connectives, and domain heuristics\n",
        "relationships, logical_connectives, domain_insights = analyze_relationships_and_domain(response_text)\n",
        "\n",
        "# Generate coherent response with relations and analysis based on the selected ontology and reason\n",
        "coherent_response_with_relations_and_analysis = generate_coherent_response_with_relations_and_analysis(\n",
        "    [selected_ontology_reason],\n",
        "    [],\n",
        "    response_text\n",
        ")\n",
        "\n",
        "# Print the analysis results\n",
        "print(\"Relationships:\")\n",
        "for rel in relationships:\n",
        "    print(\"-\", rel)\n",
        "\n",
        "print(\"\\nLogical Connectives Identified:\", logical_connectives)\n",
        "\n",
        "print(\"\\nDomain Insights:\")\n",
        "for insight in domain_insights:\n",
        "    print(\"-\", insight)\n",
        "\n",
        "print(\"\\nCoherent Response with Relations and Analysis:\")\n",
        "print(coherent_response_with_relations_and_analysis)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "c_99xCMg7XaG",
        "outputId": "d8a6e6f9-6f36-4b43-affb-a596f7bedeb5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Updated example selected by the RL agent:\n",
            "To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\n",
            "Relationships:\n",
            "- Euler's rotation theorem provides insights into the behavior of Rotation in three-dimensional space.\n",
            "\n",
            "Logical Connectives Identified: ['or', 'or', 'or', 'and', 'not', 'or', 'or', 'or', 'or', 'or', 'and', 'or', 'not', 'or', 'or', 'and', 'or', 'or', 'or', 'or', 'or', 'or', 'not', 'or']\n",
            "\n",
            "Domain Insights:\n",
            "- Euler's rotation theorem establishes fundamental constraints on rotational motion, impacting our understanding of rotational dynamics.\n",
            "\n",
            "Coherent Response with Relations and Analysis:\n",
            "The following concepts were identified: Rotation. \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "from transformers import BertTokenizer, BertForSequenceClassification\n",
        "import numpy as np\n",
        "from rdflib import Graph, Namespace, RDF, OWL, RDFS, Literal, XSD\n",
        "import spacy\n",
        "from transformers import GPT2Tokenizer, GPT2LMHeadModel\n",
        "import re  # Import the regular expression module for pattern matching\n",
        "\n",
        "# Define namespaces\n",
        "ex = Namespace(\"http://example.org/physics#\")\n",
        "\n",
        "# Create an RDF graph\n",
        "g = Graph()\n",
        "\n",
        "# Classes\n",
        "g.add((ex.Mass, RDF.type, OWL.Class))\n",
        "g.add((ex.Length, RDF.type, OWL.Class))\n",
        "g.add((ex.Rotation, RDF.type, OWL.Class))\n",
        "g.add((ex.Axis, RDF.type, OWL.Class))\n",
        "g.add((ex.Work, RDF.type, OWL.Class))\n",
        "\n",
        "# Properties\n",
        "g.add((ex.hasMass, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasMass, RDFS.domain, ex.Mass))\n",
        "g.add((ex.hasMass, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasLength, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasLength, RDFS.domain, ex.Length))\n",
        "g.add((ex.hasLength, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasAngularSpeed, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasAngularSpeed, RDFS.domain, ex.Rotation))\n",
        "g.add((ex.hasAngularSpeed, RDFS.range, ex.Axis))\n",
        "\n",
        "g.add((ex.hasWork, RDF.type, OWL.ObjectProperty))\n",
        "g.add((ex.hasWork, RDFS.domain, ex.Work))\n",
        "g.add((ex.hasWork, RDFS.range, ex.Axis))\n",
        "\n",
        "# Axioms\n",
        "g.add((ex.conservationOfAngularMomentum, RDF.type, OWL.Axiom))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedSource, ex.Rotation))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedProperty, ex.hasAngularSpeed))\n",
        "g.add((ex.conservationOfAngularMomentum, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "g.add((ex.workEnergyPrinciple, RDF.type, OWL.Axiom))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedSource, ex.Work))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedProperty, ex.hasWork))\n",
        "g.add((ex.workEnergyPrinciple, OWL.annotatedTarget, ex.Axis))\n",
        "\n",
        "# Rules\n",
        "g.add((ex.minWorkAxisDistance, RDF.type, OWL.DatatypeProperty))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.domain, ex.Work))\n",
        "g.add((ex.minWorkAxisDistance, RDFS.range, XSD.double))\n",
        "\n",
        "# Individuals\n",
        "g.add((ex.mass1, RDF.type, ex.Mass))\n",
        "g.add((ex.mass1, ex.hasMass, Literal(\"0.3\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.mass2, RDF.type, ex.Mass))\n",
        "g.add((ex.mass2, ex.hasMass, Literal(\"0.7\", datatype=XSD.double)))\n",
        "\n",
        "g.add((ex.rod, RDF.type, ex.Axis))\n",
        "g.add((ex.rod, ex.hasLength, Literal(\"1.4\", datatype=XSD.double)))\n",
        "g.add((ex.rod, ex.hasMass, Literal(\"negligible\", datatype=XSD.string)))\n",
        "\n",
        "# Load the GPT-2 tokenizer and model\n",
        "tokenizer = GPT2Tokenizer.from_pretrained(\"gpt2\")\n",
        "model = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n",
        "\n",
        "# Load pre-trained BERT model and tokenizer\n",
        "bert_tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "bert_model = BertForSequenceClassification.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Initialize Spacy for natural language processing\n",
        "nlp = spacy.load(\"en_core_web_sm\")\n",
        "\n",
        "# Define section headers for each key point\n",
        "section_headers = {\n",
        "    \"Introduction\": [\"In rotational dynamics\"],\n",
        "    \"Work-Energy Principle\": [\"work-energy principle states that\"],\n",
        "    \"Mass Distribution Impact\": [\"distribution of mass along the axis\"],\n",
        "    \"Optimal Axis of Rotation\": [\"minimizing the work done\"],\n",
        "}\n",
        "\n",
        "# Define the contextualized example\n",
        "learner_background = \"The learner has a background in engineering and is interested in practical applications of physics.\"\n",
        "context_example = \"To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\"\n",
        "\n",
        "# Apply reinforcement learning to adaptively select examples\n",
        "class RLAgent:\n",
        "    def __init__(self):\n",
        "        self.example_selected = context_example\n",
        "\n",
        "    def update_example(self, learner_response):\n",
        "        # Simplified reward function based on learner's response\n",
        "        if learner_response == \"Relevant\":\n",
        "            reward = 1\n",
        "        else:\n",
        "            reward = -1\n",
        "\n",
        "        # Simplified Q-learning update rule\n",
        "        # In a real implementation, you would use more sophisticated algorithms\n",
        "        # Update the example based on the learner's response\n",
        "        if reward > 0:\n",
        "            self.example_selected = context_example\n",
        "\n",
        "# Simulated interaction with the learner\n",
        "learner_response = \"Relevant\"  # The learner finds the example relevant\n",
        "\n",
        "# Initialize RL agent\n",
        "agent = RLAgent()\n",
        "\n",
        "# Update example based on learner's response\n",
        "agent.update_example(learner_response)\n",
        "\n",
        "# Print the updated example selected by the RL agent\n",
        "print(\"Updated example selected by the RL agent:\")\n",
        "print(agent.example_selected)\n",
        "\n",
        "# Define a function to generate coherent responses based on the identified ontology elements, logical connectives, semantic analysis, pattern matching, and domain heuristics\n",
        "def generate_coherent_response_with_relations_and_analysis(ontology_elements, logical_connectives, text):\n",
        "    coherent_response = \"\"\n",
        "\n",
        "    # Generate coherent response based on identified ontology elements\n",
        "    if ontology_elements:\n",
        "        coherent_response += \"The following concepts were identified: \"\n",
        "        coherent_response += \", \".join(ontology_elements)\n",
        "        coherent_response += \". \"\n",
        "\n",
        "    # Add logical connectives to the coherent response\n",
        "    if logical_connectives:\n",
        "        coherent_response += \"Logical Connectives Identified: \"\n",
        "        coherent_response += \", \".join(logical_connectives)\n",
        "        coherent_response += \". \"\n",
        "\n",
        "    # Identify relationships between ontology elements and logical connectives using pattern matching and semantic analysis\n",
        "    relationships = {}\n",
        "    for elem in ontology_elements:\n",
        "        for conn in logical_connectives:\n",
        "            if elem.lower() in text.lower() and conn.lower() in text.lower():\n",
        "                if elem in relationships:\n",
        "                    relationships[elem].append(conn)\n",
        "                else:\n",
        "                    relationships[elem] = [conn]\n",
        "\n",
        "    # Add relationships to the coherent response\n",
        "    if relationships:\n",
        "        coherent_response += \"Relationships:\\n\"\n",
        "        for elem, conns in relationships.items():\n",
        "            coherent_response += f\"- {elem} provides insights into the behavior of Rotation in three-dimensional space.\\n\"\n",
        "\n",
        "    # Incorporate domain heuristics\n",
        "    domain_insights = []\n",
        "\n",
        "    # Example domain heuristic: Euler's Rotation Theorem\n",
        "    if \"euler's rotation theorem\" in text.lower():\n",
        "        domain_insights.append(\"Euler's rotation theorem establishes fundamental constraints on rotational motion, impacting our understanding of rotational dynamics.\")\n",
        "\n",
        "    # Include domain heuristics in the coherent response\n",
        "    if domain_insights:\n",
        "        coherent_response += \"Domain Insights:\\n\"\n",
        "        coherent_response += \"\\n\".join(domain_insights)\n",
        "\n",
        "    # Add a concluding statement\n",
        "    coherent_response += \"Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\"\n",
        "\n",
        "    return coherent_response\n",
        "\n",
        "# Identify Logical Connectives from Input Text\n",
        "def identify_logical_connectives(text):\n",
        "    logical_connectives = []\n",
        "    doc = nlp(text)\n",
        "    for token in doc:\n",
        "        if token.pos_ == \"SCONJ\" or token.pos_ == \"CCONJ\":\n",
        "            logical_connectives.append(token.text.lower())\n",
        "    return logical_connectives\n",
        "\n",
        "# Identify Euler's Rotation Theorem from Input Text\n",
        "def identify_eulers_rotation_theorem(text):\n",
        "    theorem_match = re.search(r\"Euler's rotation theorem\", text)\n",
        "    if theorem_match:\n",
        "        return True\n",
        "    return False\n",
        "\n",
        "# Relevant information from the extracted text\n",
        "response_text = \"\"\"\n",
        "Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space. This type of motion excludes the possibility of the instantaneous axis of rotation changing its orientation and cannot describe such phenomena as wobbling or precession. According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\n",
        "\n",
        "This concept assumes that the rotation is also stable, such that no torque is required to keep it going. The kinematics and dynamics of rotation around a fixed axis of a rigid body are mathematically much simpler than those for free rotation of a rigid body; they are entirely analogous to those of linear motion along a single fixed direction, which is not true for free rotation of a rigid body. The expressions for the kinetic energy of the object, and for the forces on the parts of the object, are also simpler for rotation around a fixed axis, than for general rotational motion. For these reasons, rotation around a fixed axis is typically taught in introductory physics courses after students have mastered linear motion; the full generality of rotational motion is not usually taught in introductory physics classes.\n",
        "\"\"\"\n",
        "\n",
        "# Tokenize the response text\n",
        "input_ids = bert_tokenizer.encode(response_text, return_tensors='pt', max_length=512, truncation=True)\n",
        "\n",
        "# Perform semantic analysis using the BERT model\n",
        "with torch.no_grad():\n",
        "    outputs = bert_model(input_ids)\n",
        "\n",
        "# Extract the logits from the output\n",
        "logits = outputs.logits\n",
        "\n",
        "# Convert logits to probabilities using softmax\n",
        "probabilities = torch.softmax(logits, dim=1).squeeze().numpy()\n",
        "\n",
        "# Sample ontology and reasons based on probabilities\n",
        "ontology_reasons = {\n",
        "    \"Rotation\": \"Rotation around a fixed axis or axial rotation is a special case of rotational motion around an axis of rotation fixed, stationary, or static in three-dimensional space.\",\n",
        "    \"Euler's rotation theorem\": \"According to Euler's rotation theorem, simultaneous rotation along a number of stationary axes at the same time is impossible; if two rotations are forced at the same time, a new axis of rotation will result.\"\n",
        "}\n",
        "\n",
        "# Normalize probabilities\n",
        "normalized_probabilities = probabilities / np.sum(probabilities)\n",
        "\n",
        "# Sample ontology and reasons based on probabilities\n",
        "selected_ontology_reason = np.random.choice(list(ontology_reasons.keys()), p=normalized_probabilities, size=1, replace=False)[0]\n",
        "\n",
        "# Identify Euler's rotation theorem in the response text\n",
        "has_eulers_theorem = identify_eulers_rotation_theorem(response_text)\n",
        "\n",
        "# Generate coherent response with relations and analysis based on the selected ontology and reason\n",
        "coherent_response_with_relations_and_analysis = generate_coherent_response_with_relations_and_analysis(\n",
        "    [selected_ontology_reason],\n",
        "    identify_logical_connectives(response_text),\n",
        "    response_text\n",
        ")\n",
        "\n",
        "# Print the coherent response with relations and analysis\n",
        "print(\"Coherent Response with Relations and Analysis:\")\n",
        "print(coherent_response_with_relations_and_analysis)\n",
        "print(\"Length of probabilities array:\", len(probabilities))\n",
        "print(\"Length of keys in ontology_reasons dictionary:\", len(ontology_reasons))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PjK_5yEv8WVL",
        "outputId": "48208d56-fbcb-4828-b0df-5a12f413bf67"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of BertForSequenceClassification were not initialized from the model checkpoint at bert-base-uncased and are newly initialized: ['classifier.bias', 'classifier.weight']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Updated example selected by the RL agent:\n",
            "To explain rotational dynamics, the system presents an example of a spinning gyroscope, illustrating how its rotation affects its stability and behavior.\n",
            "Coherent Response with Relations and Analysis:\n",
            "The following concepts were identified: Euler's rotation theorem. Logical Connectives Identified: or, or, and, or, if, that, that, and, and, after. Relationships:\n",
            "- Euler's rotation theorem provides insights into the behavior of Rotation in three-dimensional space.\n",
            "Domain Insights:\n",
            "Euler's rotation theorem establishes fundamental constraints on rotational motion, impacting our understanding of rotational dynamics.Based on these elements, logical connectives, their relationships, and domain heuristics, we can further analyze the relationship.\n",
            "Length of probabilities array: 2\n",
            "Length of keys in ontology_reasons dictionary: 2\n"
          ]
        }
      ]
    }
  ]
}